// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String    @id @default(cuid())
  first_name        String?
  last_name         String?
  email             String?   @unique
  password          String
  role              UserRole? @default(USER)
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(false)
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  mobile_number     String?
  address           String?
  country           String?
  state             String?
  city              String?
  pincode           String?
  profile_pic       String?
  isProfileComplete Boolean   @default(false)
  otps              UserOtp[]
  createdShows      Show[]
  ticket            Tickets[]

  @@map(name: "users")
}

model UserOtp {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  otp       String?
  type      UserOtpType
  createdAt DateTime    @default(now()) @map(name: "created_at")
}

enum UserOtpType {
  REGISTRATION_OTP
  RESET_TOKEN
}

enum ShowMode {
  ONLINE
  OFFLINE
  BOTH
}

model Show {
  id                   String        @id @default(cuid())
  showName             String
  showType             String
  showMode             ShowMode
  showStartDateAndTime DateTime
  showEndDateAndTime   DateTime?
  noOfTickets          Int
  createdBy            User          @relation(fields: [createdById], references: [id])
  createdById          String
  createdAt            DateTime      @default(now()) @map(name: "created_at")
  TicketGroup          TicketGroup[]
  Tickets              Tickets[]

  @@map(name: "showDetails")
}

model TicketGroup {
  id             String @id @default(cuid())
  ticketGroup    String
  showId         String
  show           Show   @relation(fields: [showId], references: [id])
  SeatZoneNumber Int?

  @@map(name: "showTickets")
}

model Tickets {
  id          String  @id @default(cuid())
  showId      String?
  show        Show?   @relation(fields: [showId], references: [id])
  ticketGroup String?
  quantity    Int
  price       Int
  description String? @db.LongText
  createdBy   User    @relation(fields: [createdById], references: [id])
  createdById String

  @@map(name: "Tickets")
}
