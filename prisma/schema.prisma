// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String        @id @default(cuid())
  first_name        String?
  last_name         String?
  email             String?       @unique
  password          String
  role              UserRole?     @default(USER)
  isVerified        Boolean       @default(false)
  isActive          Boolean       @default(false)
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  mobile_number     String?
  address           String?
  country           String?
  state             String?
  city              String?
  pincode           String?
  profile_pic       String?
  isProfileComplete Boolean       @default(false)
  otps              UserOtp[]
  createdShows      Show[]
  ticket            Tickets[]
  token             String?
  QuestionSet       QuestionSet[]
  Question          Question[]
}

model UserOtp {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String      @unique
  otp            String?
  type           UserOtpType
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  expirationTime DateTime?
}

enum UserOtpType {
  REGISTRATION_OTP
  RESET_TOKEN
}

enum ShowMode {
  ONLINE
  OFFLINE
  BOTH
}

model Show {
  id               String        @id @default(cuid())
  Name             String
  Type             String
  Mode             ShowMode
  StartDateAndTime DateTime
  EndDateAndTime   DateTime?
  noOfTickets      Int
  createdBy        User          @relation(fields: [createdById], references: [id])
  createdById      String
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  TicketGroup      TicketGroup[]
  Tickets          Tickets[]
}

model TicketGroup {
  id             String @id @default(cuid())
  ticketGroup    String
  showId         String
  show           Show   @relation(fields: [showId], references: [id])
  SeatZoneNumber Int?
}

model Tickets {
  id          String  @id @default(cuid())
  showId      String?
  show        Show?   @relation(fields: [showId], references: [id])
  ticketGroup String?
  quantity    Int
  price       Int
  description String? @db.LongText
  createdBy   User    @relation(fields: [createdById], references: [id])
  createdById String
}

model QuestionSet {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  isDeleted   Boolean  @default(false)
  Quiz        Quiz[]
}

enum QuestionType {
  OBJECTIVE
  SUBJECTIVE
}

model Question {
  id                     String                  @id @default(cuid())
  question_text          String
  type                   QuestionType // "objective" or "subjective"
  objective_options      ObjectiveOptions[]      @relation("QuestionToAnswer")
  subjective_description SubjectiveDescription[] @relation("SubjectiveQuestionToAnswer")
  timer                  Int                     @default(0)
  createdAt              DateTime                @default(now()) @map(name: "created_at")
  updatedAt              DateTime                @updatedAt @map(name: "updated_at")
  createdBy              User                    @relation(fields: [createdById], references: [id])
  createdById            String
  isDeleted              Boolean                 @default(false)
  Quiz                   Quiz[]
}

model ObjectiveOptions {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation("QuestionToAnswer", fields: [questionId], references: [id])
}

model SubjectiveDescription {
  id          String   @id @default(cuid())
  problem     String   @db.LongText
  description String   @db.LongText
  questionId  String
  question    Question @relation("SubjectiveQuestionToAnswer", fields: [questionId], references: [id])
}

model Quiz {
  id          String       @id @default(cuid())
  setId       String
  set         QuestionSet? @relation(fields: [setId], references: [id])
  questionId  String
  question    Question?    @relation(fields: [questionId], references: [id])
  lastUpdated DateTime     @default(now()) @map(name: "lastUpdated")
  createdBy   String
}

model UserQuizAnswers {
  id          String  @id @default(cuid())
  submittedBy String
  quizId      String
  questionId  String
  isAttempted Boolean @default(false)
  isAnswered  Boolean @default(false)
  givenAnswer String
  timeTaken   Int?
  timeOver    Boolean @default(false)
  isCorrect   Boolean @default(false)
}
