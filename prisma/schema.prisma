// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                String             @id @default(cuid())
  first_name        String?
  last_name         String?
  email             String?            @unique
  password          String
  role              UserRole?          @default(USER)
  isVerified        Boolean            @default(false)
  isActive          Boolean            @default(false)
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  mobile_number     String?
  address           String?
  country           String?
  state             String?
  city              String?
  pincode           String?
  profile_pic       String?            @default("https://upload.wikimedia.org/wikipedia/commons/b/bc/Unknown_person.jpg")
  isProfileComplete Boolean            @default(false)
  otps              UserOtp[]
  token             String?
  Quiz              Quiz[]
  Question          Question[]
  UserQuizAnswers   UserQuizAnswers[]
  notifications     UserNotification[]
  userImage         String?            @default("https://upload.wikimedia.org/wikipedia/commons/b/bc/Unknown_person.jpg")
  UserQuizReport    UserQuizReport[]
  Subscription      Subscription[]
}

model UserOtp {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String      @unique
  otp            String?
  type           UserOtpType
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  expirationTime DateTime?
}

enum UserOtpType {
  REGISTRATION_OTP
  RESET_TOKEN
}

enum QuizCreationStatusE {
  PUBLISH
  DELETE
  FREE
  DRAFT
}

model Quiz {
  id              String               @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime             @default(now()) @map(name: "created_at")
  updatedAt       DateTime             @updatedAt @map(name: "updated_at")
  createdBy       User                 @relation(fields: [createdById], references: [id])
  createdById     String
  price           Float?               @default(0.0)
  status          QuizCreationStatusE?
  QuizQuestions   QuizQuestions[]
  UserQuizAnswers UserQuizAnswers[]
  Subscription    Subscription[]
}

enum QuestionType {
  OBJECTIVE
  SUBJECTIVE
}

enum AnswerTypeE {
  SINGLECHOICE
  MULTIPLECHOICE
}

model Question {
  id                String             @id @default(cuid())
  question_text     String?            @db.Text
  type              QuestionType // "objective" or "subjective"
  objective_options ObjectiveOptions[] @relation("QuestionToAnswer")
  timer             Int                @default(0)
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  editorContent     String?            @db.VarChar(1000)
  createdBy         User               @relation(fields: [createdById], references: [id])
  createdById       String
  isDeleted         Boolean            @default(false)
  QuizQuestions     QuizQuestions[]
  solution          String?            @db.VarChar(1000)
  answer_type       AnswerTypeE?
}

model ObjectiveOptions {
  id           String   @id @default(cuid())
  text         String   @db.VarChar(1000)
  isCorrect    Boolean
  questionId   String
  question     Question @relation("QuestionToAnswer", fields: [questionId], references: [id])
  option_marks Float?   @default(0.0)
}

// Quiz to QuizQuestions
model QuizQuestions {
  id          String    @id @default(cuid())
  quizId      String
  quiz        Quiz?     @relation(fields: [quizId], references: [id])
  questionId  String
  question    Question? @relation(fields: [questionId], references: [id])
  lastUpdated DateTime  @default(now()) @map(name: "lastUpdated")
  createdBy   String
}

enum UserQuizAnswerStatus {
  NOT_ATTEMPTED
  ATTEMPTED
  REVIEW
  SKIPPED
}

model UserQuizAnswers {
  id              String                @id @default(cuid())
  submittedBy     String
  submittedByUser User                  @relation(fields: [submittedBy], references: [id])
  quizId          String
  Quiz            Quiz?                 @relation(fields: [quizId], references: [id])
  questionId      String
  // TODO: Remove isAnswered because UserQuizAnswersStatus is already handling
  // isAnswered      Boolean?              @default(false)
  status          UserQuizAnswerStatus? @default(NOT_ATTEMPTED)
  // TODO: make it array becuase of multiple answeres
  ans_optionsId   String?
  ans_subjective  String?
  timeTaken       Int?
  timeOver        Boolean?              @default(false)
  // TODO: No need of isCorrect
  isCorrect       Boolean?              @default(false)
  // finalSubmit     Boolean?              @default(false)
  marks           Float?                @default(0)
  questions_marks Float?                @default(0)
  isCurrent       Boolean?              @default(false)
}

model UserNotification {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  message String?
  isRead  Boolean? @default(false)
  time    DateTime @default(now()) @map(name: "time")
}

enum UserQuizStatusE {
  SUBMITTED
  INCOMPLETED
  INPROGRESS
}

enum ReportStatusE {
  GENERATED
  UNDERREVIEW
  INITIALIZED
}

model UserQuizReport {
  id                     String           @id @default(cuid())
  candidateId            String
  user                   User             @relation(fields: [candidateId], references: [id])
  quizId                 String
  candidateStatus        UserQuizStatusE?
  candidateQuizStartTime DateTime         @default(now()) @map(name: "started_at")
  candidateQuizEndtime   DateTime?
  // correctAnswers Int?               @default(0)
  // wrongAnswers   Int?               @default(0)
  // notAttempted   Int?               @default(0)
  obtMarks               Float?           @default(0.0)
  // negMarks       Int?               @default(0)
  // timeTaken      Int?               @default(0)
  totalMarks             Float?           @default(0.0)
  quizOwnerStatus        ReportStatusE?   @default(INITIALIZED)
}

model Subscription {
  id                 String    @id @default(cuid())
  candidateId        String
  user               User      @relation(fields: [candidateId], references: [id])
  quizId             String
  quiz               Quiz      @relation(fields: [quizId], references: [id])
  startedAt          DateTime  @default(now()) @map(name: "startedAt")
  expiresOn          DateTime?
  isApproved         Boolean?  @default(false)
  isDeleted          Boolean?  @default(false)
  subscriptionStatus Boolean?  @default(true)
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.pdf"
}
